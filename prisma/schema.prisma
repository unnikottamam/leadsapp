// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String?
  lastName       String?
  email          String?   @unique
  hashedPassword String?
  phone          String?
  role           Role      @default(EDITOR)
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  archive        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
  comments       Comment[]
  leads          Lead[]
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String    @unique
  phone     String?
  address   String?
  street    String?
  state     String?
  country   String?
  zip       String?
  createdAt DateTime  @default(now())
  archive   Boolean   @default(false)
  comments  Comment[]
  leads     Lead[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lead {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  status    Status    @default(NEW)
  firstName String
  lastName  String
  email     String
  phone     String?
  archive   Boolean   @default(false)
  comments  Comment[]
  userId    String?   @db.ObjectId
  updatedBy User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  Client    Client?   @relation(fields: [clientId], references: [id])
  clientId  String?   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  lead      Lead?    @relation(fields: [leadId], references: [id])
  leadId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?  @db.ObjectId
  createdAt DateTime @default(now())
}

enum Status {
  NEW
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Role {
  SUBSCRIBER
  EDITOR
  ADMIN
}
